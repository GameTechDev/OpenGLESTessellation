////////////////////////////////////////////////////////////////////////////////
// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy
// of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
// License for the specific language governing permissions and limitations
// under the License.
////////////////////////////////////////////////////////////////////////////////
// Generated by ShaderGenerator.exe version 0.13
//--------------------------------------------------------------------------------------

// Fog color in both shaders
// Skybox
precision highp float;

const float TessellationHeight = 5500.0; // Height of a 1.0 in the height map (height map * TessellationHeight)

// -------------------------------------
layout (std140, row_major) uniform cbPerModelValues
{
   mat4 World;
   mat4 NormalMatrix;
   mat4 WorldViewProjection;
   mat4 InverseWorld;
   mat4 LightWorldViewProjection;
   vec4 BoundingBoxCenterWorldSpace;
   vec4 BoundingBoxHalfWorldSpace;
   vec4 BoundingBoxCenterObjectSpace;
   vec4 BoundingBoxHalfObjectSpace;
};

// -------------------------------------
layout (std140, row_major) uniform cbPerFrameValues
{
   mat4  View;
   mat4  InverseView;
   mat4  Projection;
   mat4  ViewProjection;
   vec4  AmbientColor;
   vec4  LightColor;
   vec4  LightDirection;
   vec4  EyePosition;
   vec4  MaxTessellation;
};
// -------------------------------------
uniform sampler2D Texture0;
uniform sampler2D Texture1;
uniform sampler2D Texture2;
// -------------------------------------

#ifdef GLSL_FRAGMENT_SHADER
precision highp float;
// -------------------------------------
in vec3 gTriDistance;
// -------------------------------------
#endif //GLSL_FRAGMENT_SHADER

#ifdef GLSL_GEOMETRY_SHADER

#ifdef OPENGL_ES
#extension GL_INTEL_geometry_shader:require
#endif

layout(triangles) in;
layout(line_strip, max_vertices = 3) out;

in vec4 outPosition[3];

void main()
{
    gl_Position = outPosition[0];
    EmitVertex();
    gl_Position = outPosition[1];
    EmitVertex();
    gl_Position = outPosition[2];
    EmitVertex();

    EndPrimitive();
}

#endif // GLSL_GEOMETRY_SHADER

#ifdef GLSL_FRAGMENT_SHADER
out vec4 fragColor;// -------------------------------------

void main( )
{
    fragColor = vec4(0);
}

#endif //GLSL_FRAGMENT_SHADER
