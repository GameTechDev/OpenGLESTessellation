////////////////////////////////////////////////////////////////////////////////
// Copyright 2017 Intel Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License"); you may not
// use this file except in compliance with the License.  You may obtain a copy
// of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
// WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the
// License for the specific language governing permissions and limitations
// under the License.
////////////////////////////////////////////////////////////////////////////////
// Generated by ShaderGenerator.exe version 0.13
//--------------------------------------------------------------------------------------
precision highp float;

// -------------------------------------
layout (std140, row_major) uniform cbPerModelValues
{
   mat4 World;
   mat4 NormalMatrix;
   mat4 WorldViewProjection;
   mat4 InverseWorld;
   mat4 LightWorldViewProjection;
   vec4 BoundingBoxCenterWorldSpace;
   vec4 BoundingBoxHalfWorldSpace;
   vec4 BoundingBoxCenterObjectSpace;
   vec4 BoundingBoxHalfObjectSpace;
};

// -------------------------------------
layout (std140, row_major) uniform cbPerFrameValues
{
   mat4  View;
   mat4  InverseView;
   mat4  Projection;
   mat4  ViewProjection;
   vec4  AmbientColor;
   vec4  LightColor;
   vec4  LightDirection;
   vec4  EyePosition;
   vec4  TotalTimeInSeconds;
};



#ifdef GLSL_VERTEX_SHADER

#define POSITION  0
// -------------------------------------
layout (location = POSITION)  in vec3 Position; // Projected position
// -------------------------------------

out   vec4  OutPosition;

#endif //GLSL_VERTEX_SHADER
#ifdef GLSL_FRAGMENT_SHADER
// -------------------------------------
in   vec4  OutPosition;


#endif //GLSL_FRAGMENT_SHADER

#ifdef GLSL_VERTEX_SHADER
// -------------------------------------
void main( )
{

    OutPosition      = vec4( Position, 1.0) * WorldViewProjection;
	OutPosition.z -= 0.0001 * OutPosition.w;

    gl_Position = OutPosition;
}

#endif //GLSL_VERTEX_SHADER

#ifdef GLSL_FRAGMENT_SHADER
out  vec4 fragColor;
// -------------------------------------
void main( )
{

    fragColor =  vec4( 1.0,1.0,1.0, 1.0);
}

#endif //GLSL_FRAGMENT_SHADER
